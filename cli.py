import click
import abc
from random import randint
from typing import Callable, Dict, Tuple


# –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∫–ª–∞—Å—Å–∞–º–∏
class Pizza(abc.ABC):
    def __init__(self, size: str = 'L'):
        # –°–ª–æ–≤–∞—Ä—å —Ä–∞–∑–º–µ—Ä–æ–≤ –±–ª—é–¥
        # –∏ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        self.mult_dict = {'L': 1, 'XL': 2}

        if size.upper() in self.mult_dict.keys():
            self.size = size.upper()
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∏—Ü—Ü")

    @abc.abstractmethod
    def dict(self):
        pass

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.size == other.size
        return False


def get_recipe(recipe: dict,
               size: str,
               mult_dict: Dict[str, int]) -> Dict[str, Tuple[int, str]]:

    """–í—ã–≤–æ–¥–∏—Ç —Ä–µ—Ü–µ–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –±–ª—é–¥–∞"""
    x = mult_dict[size]
    return {ingredient: (x * params[0], params[1]) for ingredient, params
            in recipe.items()}


class Margherita(Pizza):
    def __init__(self, size: str = 'L'):
        super().__init__(size)
        self.icon = 'üçÖ'
        self.recipe = {'tomato sauce': (115, 'g'),
                       'mozzarella ': (125, 'g'),
                       'tomatoes': (1, '')}

    def dict(self):
        return get_recipe(self.recipe, self.size, self.mult_dict)


class Pepperoni(Pizza):
    def __init__(self, size: str = 'L'):
        super().__init__(size)
        self.icon = 'üçï'
        self.recipe = {'tomato sauce': (115, 'g'),
                       'mozzarella ': (125, 'g'),
                       'pepperoni': (200, 'g')}

    def dict(self):
        return get_recipe(self.recipe, self.size, self.mult_dict)


class Hawaiian(Pizza):
    def __init__(self, size: str = 'L'):
        super().__init__(size)
        self.icon = 'üçç'
        self.recipe = {'tomato sauce': (115, 'g'),
                       'mozzarella ': (125, 'g'),
                       'chicken ': (250, 'g'),
                       'pineapples': (1, '')}

    def dict(self):
        return get_recipe(self.recipe, self.size, self.mult_dict)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
def log(pattern) -> Callable:
    """–í—ã–≤–æ–¥–∏—Ç –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    def decorator(function: Callable) -> Callable:
        def wrapper(*args, **kwargs):
            time = randint(1, 100)
            answer = pattern.format(time)
            print(answer)
        return wrapper
    return decorator


@log('bake ‚Äî {}—Å!')
def bake(pizza: Pizza):
    """–ì–æ—Ç–æ–≤–∏—Ç –ø–∏—Ü—Ü—É"""


@log('üõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ {}—Å!')
def delivery(pizza: Pizza):
    """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""


@log('üè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞ {}—Å!')
def pickup(pizza: Pizza):
    """–°–∞–º–æ–≤—ã–≤–æ–∑"""


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
@click.group()
def cli():
    pass


@cli.command()
@click.option(' =delivery', 'with_delivery', default=False, is_flag=True)
@click.argument('pizza', nargs=1)
def order(pizza: Pizza, with_delivery: bool):
    """–ì–æ—Ç–æ–≤–∏—Ç –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""
    bake(pizza)
    if with_delivery:
        delivery(pizza)
    else:
        pickup(pizza)


@cli.command()
def menu():
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é"""
    for cl in (Margherita(), Pepperoni(), Hawaiian()):
        ingredients = ', '.join(cl.dict().keys())
        print(f'- {cl.__class__.__name__} {cl.icon}: {ingredients}')


if __name__ == '__main__':
    cli()
